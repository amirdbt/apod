{"version":3,"sources":["components/NasaItem.jsx","components/Logo.jsx","App.js","serviceWorker.js","index.js"],"names":["NasaItem","nasa","className","title","src","url","alt","explanation","copyright","date","Logo","params","particles","number","value","density","enable","value_area","options","max","style","height","width","role","paddingTop","App","state","fetch","then","response","json","setState","console","log","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4SAoBeA,G,MAjBE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAClB,OACE,6BAASC,UAAU,WACjB,yBAAKA,UAAU,IACb,wBAAIA,UAAU,kBAAkBD,EAAKE,QAEvC,yBAAKC,IAAKH,EAAKI,IAAKH,UAAU,gCAAgCI,IAAI,QAClE,yBAAKJ,UAAU,OACb,uBAAGA,UAAU,UAAUD,EAAKM,aAC5B,2BAAOL,UAAU,eACdD,EAAKO,UACN,8BAAOP,EAAKQ,W,gDCgCPC,EAzCF,WAYX,OACE,6BACE,kBAAC,IAAD,CAAWR,UAAU,YAAYS,OAbZ,CACvBC,UAAW,CACTC,OAAQ,CACNC,MAAO,IACPC,QAAS,CACPC,QAAQ,EACRC,WAAY,UAQhB,4BAAQf,UAAU,iDAChB,kBAAC,IAAD,CACEA,UAAU,2BACVgB,QAAS,CAAEC,IAAK,IAChBC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,MAE7B,yBAAKpB,UAAU,kBACb,0BAAMqB,KAAK,OACR,IACD,yBACEH,MAAO,CAAEI,WAAY,QACrBlB,IAAI,OACJF,IAAI,6DACH,OAKT,wBAAIF,UAAU,8BAAd,mCCJOuB,E,YA1Bb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXzB,KAAM,IAHI,E,iFAMO,IAAD,OAClB0B,MAAM,+CAAD,OAVG,6CAWLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,OACZ,EAAKE,SAAS,CACZ9B,KAAM4B,OAGZG,QAAQC,IAAIC,KAAKR,MAAMzB,Q,+BAGvB,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUD,KAAMiC,KAAKR,MAAMzB,Y,GArBjBkC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.1b898f52.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./NasaItem.css\"\r\n\r\nconst NasaItem = ({ nasa }) => {\r\n  return (\r\n    <article className=\"article\">\r\n      <div className=\"\">\r\n        <h1 className=\"f2 ttu tracked\">{nasa.title}</h1>\r\n      </div>\r\n      <img src={nasa.url} className=\"w-50  center grow shadow-5 db\" alt=\"url\" />\r\n      <div className=\"pa3\">\r\n        <p className=\"f4  tc\">{nasa.explanation}</p>\r\n        <small className=\"gray db pv2\">\r\n          {nasa.copyright}\r\n          <time>{nasa.date}</time>\r\n        </small>\r\n      </div>\r\n    </article>\r\n  )\r\n}\r\nexport default NasaItem\r\n","import React from \"react\"\r\nimport Tilt from \"react-tilt\"\r\nimport \"./Logo.css\"\r\nimport Particles from \"react-particles-js\"\r\n\r\nconst Logo = () => {\r\n  const particlesOptions = {\r\n    particles: {\r\n      number: {\r\n        value: 130,\r\n        density: {\r\n          enable: true,\r\n          value_area: 800\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <div>\r\n      <Particles className=\"particles\" params={particlesOptions} />\r\n      <header className=\"logo bg-white black-80 tc pv4 avenir shadow-4\">\r\n        <Tilt\r\n          className=\"Tilt br2 shadow-4 center\"\r\n          options={{ max: 55 }}\r\n          style={{ height: 150, width: 150 }}\r\n        >\r\n          <div className=\"Tilt-inner pa3\">\r\n            <span role=\"img\">\r\n              {\" \"}\r\n              <img\r\n                style={{ paddingTop: \"15px\" }}\r\n                alt=\"nasa\"\r\n                src=\"https://api.nasa.gov/assets/img/favicons/favicon-192.png\"\r\n              />{\" \"}\r\n            </span>\r\n          </div>\r\n        </Tilt>\r\n\r\n        <h2 className=\"mt2 mb0 f6 fw4 ttu tracked\">\r\n          Astronomy Picture of the day\r\n        </h2>\r\n      </header>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Logo\r\n","import React from \"react\"\nimport NasaItem from \"./components/NasaItem\"\nimport \"./App.css\"\nimport Logo from \"./components/Logo\"\n\nconst API = \"0QyXo9xlxST9V6IfHYtrgEXhge3bMEaWLuwKHl9b\"\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      nasa: []\n    }\n  }\n  componentDidMount() {\n    fetch(`https://api.nasa.gov/planetary/apod?api_key=${API}`)\n      .then(response => response.json())\n      .then(response =>\n        this.setState({\n          nasa: response\n        })\n      )\n    console.log(this.state.nasa)\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Logo />\n        <NasaItem nasa={this.state.nasa} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport \"tachyons\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}